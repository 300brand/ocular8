#!/usr/bin/env python3
import argparse
import bson
import cleanurl
import datetime
import pymongo
import time
import urllib.error
import urllib.request


def process(db, entry, nsq):
	start = datetime.datetime.now()
	try:
		url, req = cleanurl.clean(entry['link'])
	except urllib.error.HTTPError as err:
		print(feed['_id'], 'HTTPERROR', err, entry['link'])
		db.article_errors.insert({
			'url':    entry['link'],
			'type':   'HTTPError',
			'code':   err.code,
			'reason': err.reason
		})
		db.entries.remove(entry['_id'], multi=False)
		return
	except urllib.error.URLError as err:
		print(feed['_id'], 'URLERROR', err, entry['link'])
		db.article_errors.insert({
			'url':    entry['url'],
			'type':   'URLError',
			'reason': str(err.reason)
		})
		db.entries.remove(entry['_id'], multi=False)
		return

	if db.articles.find_one({ 'url': url }) is not None:
		print(feed['_id'], 'NONUNIQUE', url)
		return

	html = req.read()

	published = entry.get('published_parsed', None)
	if published is not None:
		published = datetime.datetime(*published[:6])

	dur = datetime.datetime.now() - start
	loadtime = (dur.microseconds + dur.seconds * 10**6) * 1000

	article = {
		'_id':       entry['_id'],
		'feedid':    entry['feedid'],
		'pubid':     entry['pubid'],
		'author':    entry.get('author', None),
		'published': published,
		'title':     entry.get('title', None),
		'url':       url,
		'html':      html,
		'loadtime':  loadtime,
		'entry':     {
			'author':    entry.get('author', None),
			'published': published,
			'title':     entry.get('title', None),
			'url':       entry['link']
		}
	}
	
	print(entry['feedid'], 'ARTICLE', article['_id'])
	db.articles.insert(article)
	db.entries.remove(entry['_id'], multi=False)

def main():
	parser = argparse.ArgumentParser(description='Download articles and push into queue for processing')
	parser.add_argument('-mongo', help='MongoDB connection string', default='mongodb://localhost:27017/ocular8')
	parser.add_argument('-nsqdhttp', help='NSQd HTTP address', default='http://localhost:4151')
	parser.add_argument('id', help='feed_article IDs', nargs='+')
	args = parser.parse_args()

	db = pymongo.MongoClient(args.mongo).get_default_database()
	bson_ids = [ bson.objectid.ObjectId(id) for id in args.id ]
	for id in bson_ids:
		entry = db.entries.find_and_modify({ '_id': id }, update={ '$inc': { 'attempts': 1 } })
		if entry is None:
			print("NOT FOUND", id)
			continue
		process(db, entry, args.nsqdhttp)

if __name__ == "__main__":
	main()
